# 下棋程式完全複製GPT答案
import random

# 顯示棋盤
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# 檢查是否有玩家獲勝
def check_winner(board, player):
    # 檢查行
    for row in board:
        if all([spot == player for spot in row]):
            return True
    # 檢查列
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    # 檢查對角線
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

# 檢查是否和局
def check_tie(board):
    return all([spot != " " for row in board for spot in row])

# 讓玩家移動
def player_move(board, player):
    while True:
        move = input(f"Player {player}, enter your move (row and column): ")
        try:
            row, col = map(int, move.split())
            if board[row][col] == " ":
                board[row][col] = player
                break
            else:
                print("This spot is already taken.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter row and column as two integers separated by a space.")

# 讓電腦移動
def computer_move(board, player):
    empty_spots = [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]
    row, col = random.choice(empty_spots)
    board[row][col] = player

# 主函數
def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    while True:
        print_board(board)
        if current_player == "X":
            player_move(board, current_player)
        else:
            computer_move(board, current_player)

        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break

        if check_tie(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    main()

